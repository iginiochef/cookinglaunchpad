{"version":3,"sources":["utils.ts","MintButton.tsx","Home.tsx","Header.tsx","App.tsx","reportWebVitals.ts","index.tsx","candy-machine.ts"],"names":["SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","anchor","PublicKey","getAtaForMint","mint","buyer","a","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","useGateway","gatewayStatus","requestGatewayToken","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","onClick","variant","ConnectButton","WalletDialogButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","message","severity","undefined","alertState","setAlertState","queryString","window","location","search","urlParams","URLSearchParams","rpcUrl","get","wallet","useWallet","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","candyMachineId","getCandyMachineState","connection","cndy","console","log","mints","getParsedTokenAccountsByOwner","programId","c","ctdeposit","auth","value","account","data","parsed","info","tokenAmount","amount","includes","alert","process","exit","mintAmount","parseInt","i","document","getElementById","click","connected","program","mintOneToken","mintTxId","status","err","awaitTransactionSignatureConfirmation","txTimeout","msg","code","reload","indexOf","marginTop","maxWidth","position","padding","backgroundColor","borderRadius","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","autoHideDuration","onClose","Header","container","direction","justifyContent","wrap","item","xs","color","fontWeight","state","itemsRemaining","itemsAvailable","theme","createTheme","palette","type","candy","e","getCandyMachineId","network","rpcHost","Connection","clusterApiUrl","startDateSeed","REACT_APP_CANDY_START_DATE","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","startDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","_signatureSubscriptions","removeSignatureListener","provider","preflightCommitment","fetchIdl","idl","fetch","toNumber","itemsRedeemed","itemsRedeemedNormal","id","config","orderInfo","notary","isSoldOut","tokenMint","getMasterEdition","Buffer","from","getMetadata","getWalletLimit","payer","candyAddress","getStagesInfo","getWalletBump","Keypair","generate","userTokenAccountAddress","candyConfig","candyMachineAddress","remainingAccounts","compute","TransactionInstruction","keys","memoTX","metadataAddress","masterEdition","walletInfo","walletBump","launchStagesInfo","accounts","mintReceiver","metadata","tokenAta","walletLimitInfo","slotHashes","tokenMetadataProgram","tokenProgram","systemProgram","SystemProgram","associatedTokenProgram","rent","SYSVAR_RENT_PUBKEY","push","pubkey","isWritable","isSigner","instruction","mintNft","mintNftTX","transaction","Transaction","add","feePayer","getRecentBlockhash","recentBlockhash","blockhash","txMessage","serializeMessage","body","response","bs58","encode","method","JSON","stringify","headers","json","signature","decode","partialSign","addSignature","finalTx","serialize","verifySignatures","skipPreflight","sendRawTransaction","ms"],"mappings":"4PA8CaA,G,KAvBU,IAAIC,KAAKC,aAAa,QAAS,CACpDC,MAAO,UACPC,sBAAuB,EACvBC,sBAAuB,IAqBvB,IAAIC,IAAYC,UAAU,iDAMfC,GAJQ,IAAIF,IAAYC,UACnC,+CAGwB,uCAAG,WAC3BE,EACAC,GAF2B,SAAAC,EAAA,sEAIdL,IAAYC,UAAUK,mBACjC,CAACF,EAAMG,WAAYC,IAAiBD,WAAYJ,EAAKI,YACrDb,GANyB,mFAAH,2D,iLC/Cbe,EAAYC,kBAAOC,IAAPD,CAAH,sOAWTE,EAAa,SAAC,GAQpB,IAPLC,EAOI,EAPJA,OAQA,GADI,EANJC,aAMI,EALJC,UAM+CC,wBAAlBC,GAA7B,EAAQC,oBAAR,EAA6BD,eAC7B,EAA8BE,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACJL,IAAkBM,gBAAcC,QAAUJ,IAC5CP,IACAQ,GAAW,MAEZ,CAACJ,EAAeG,EAASC,EAAYR,IAcxC,OACE,cAACJ,EAAD,CAMEgB,QAAO,sBAAE,sBAAApB,EAAA,6DACPgB,GAAW,GADJ,SAEDR,IAFC,2CAMTa,QAAQ,YAZV,SAJO,W,2NCpBLC,EAAgBjB,kBAAOkB,IAAPlB,CAAH,sOAWbmB,EAAgBnB,UAAOoB,IAAV,4BAytBJC,IA9sBF,SAACC,GACZ,MAA0Cb,oBAAS,GAAnD,mBAAOc,EAAP,KAAsBC,EAAtB,KACA,EAAwCf,qBAAxC,mBAAOL,EAAP,KAAqBqB,EAArB,KACA,EAAoChB,mBAAqB,CACvDiB,MAAM,EACNC,QAAS,GACTC,cAAUC,IAHZ,mBAAOC,EAAP,KAAmBC,EAAnB,KAQMC,EAAcC,OAAOC,SAASC,OAC9BC,EAAY,IAAIC,gBAAgBL,GAClCM,EAAS,mCACTF,EAAUG,IAAI,SAEhBD,EAASF,EAAUG,IAAI,QAGzB,IAAMC,EAASC,cACTC,EAAeC,mBAAQ,WAC3B,GACGH,GACAA,EAAOI,WACPJ,EAAOK,qBACPL,EAAOM,gBAKV,MAAO,CACLF,UAAWJ,EAAOI,UAClBC,oBAAqBL,EAAOK,oBAC5BC,gBAAiBN,EAAOM,mBAEzB,CAACN,IAEEO,EAA2BC,sBAAW,sBAAC,4BAAArD,EAAA,yDACtC+C,EADsC,qDAKvCpB,EAAM2B,eALiC,0CAOpBC,YACjBR,EACApB,EAAM2B,eACN3B,EAAM6B,YAV+B,OAOjCC,EAPiC,OAYvC3B,EAAgB2B,GAZuB,kDAcvCC,QAAQC,IAAI,oDACZD,QAAQC,IAAR,MAfuC,0DAkB1C,CAACZ,EAAcpB,EAAM2B,eAAgB3B,EAAM6B,aAExChD,EAAM,uCAAG,kDAAAR,EAAA,6DACP4D,EAAQ,CACZ,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,8CACA,+CACA,+CACA,gDArfW,SAufSjC,EAAM6B,WAAWK,8BAA8BhB,EAAOI,UAAW,CAAEa,UAAW,IAAIlE,YAAU,iDAvfrG,OAyfb,IAASmE,KAFLC,EAvfS,OAwfTC,GAAO,EACGD,EAAUE,MACgD,GAAlEF,EAAUE,MAAMH,GAAGI,QAAQC,KAAKC,OAAOC,KAAKC,YAAYC,QAEtDZ,EAAMa,SAAST,EAAUE,MAAMH,GAAGI,QAAQC,KAAKC,OAAOC,KAAKxE,QAE3DmE,GAAO,GAIH,GAARA,IACFS,MAAM,oDACNC,EAAQC,QAGJvC,EAAcC,OAAOC,SAASC,OAC9BC,EA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","file":"static/js/main.89a79c7a.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #36d3c0 0%, #35c0d9 100%);\r\n  color: white;\r\n  font-size: 26px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n  const getMintButtonContent = () => {\r\n    /*if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (candyMachine?.state.isPresale) {\r\n      return 'PRESALE MINT';\r\n    }*/\r\n\r\n    return 'COOK';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      /*disabled={\r\n        candyMachine?.state.isSoldOut ||\r\n        isMinting ||\r\n        !candyMachine?.state.isActive\r\n      }*/\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        await onMint();\r\n          //setClicked(false);\r\n        \r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport { Connection as conn } from '@solana/web3.js';\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport bs58 from 'bs58';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\nimport { AlertState } from './utils';\r\nimport { Header } from './Header';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { SolanaGatewayProvider } from '@civic/solana-gateway-react/dist/esm/solana';\r\nimport { profileEnd } from 'console';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #36d3c0 0%, #35c0d9 100%);\r\n  color: white;\r\n  font-size: 26px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n`; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n\r\n\r\n\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  let rpcUrl = 'https://trashpandas.rpcpool.com/';\r\n  if (urlParams.get('api'))\r\n  {\r\n    rpcUrl = urlParams.get('api')!;\r\n  }\r\n\r\n  const wallet = useWallet();\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log('There was a problem fetching Candy Machine state');\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  const onMint = async () => {\r\n    const mints = [\r\n      \"6KnwHF8hLTseHw6T753DR782f7ehrrCHLrRMMBoEq1bY\",\r\n      \"9PrRRAR84nLhEj7S4cQQLZk2gJoHVkYQFg6mDNMcqHtk\",\r\n      \"HM7aJeWHT1wYK6Zgj7Rcx8yP3jSGMY15Sba5vMfkN1Wq\",\r\n      \"FYjQTCusdVfmE13pSSTz8H3u9xd8zKATqnCEh6RX4zos\",\r\n      \"HBzG91yJx3BxfcJtYgeNtUZJKW4BatKtJazcRo8kJF4s\",\r\n      \"AdopuQnCFB75eMyzYZpyzWKvT7bjtedPgmZDWTgT6usX\",\r\n      \"DDBSfxyAcmcCvVsZcUjdzUTaDWuRnUaYMQA9rFv496En\",\r\n      \"9j8FYZANuDibRm6bFkXSKnzABAMAxnQr4e52hYwyEzVk\",\r\n      \"22JsShZePopKP2zXXpqSsEVh5frXa18RXzEBP6feYEUv\",\r\n      \"AgTv8xQuiCkhYjqcC3BBvd4NCWcsZUXs6ww2TbgkvEm9\",\r\n      \"ExyPStvxYHRuFURuB935kcWMyNvN6Ke4UX76xMrZYcJU\",\r\n      \"5uvBc1Qs6hjn6M4b7gXBXPm38VMVa3p28tZvy4mqxHRt\",\r\n      \"9gXLye355V5Rm4bpBJmDkdU5wFWZCbPNN2XFK5fpvzHo\",\r\n      \"62vn8DdB3G67SCMiwFkkSKqbzAj3XqmxmScmvQGvCLxD\",\r\n      \"EmMVKaebJ57HHVCXQFv8UvvuH3TWgcMzSx33wD1xbZFh\",\r\n      \"3z8BDT2AtXtX2PgfVNorVSuxhScUXxy8xvckeMffdtXW\",\r\n      \"HqPTTJPKzAy7yKo4Jyg2DLdqbVGH83ft1wcHEN3iVYcT\",\r\n      \"FkDdjqpfKb2vyK9E2sDo1AQdeJ1ib7QnBczzNwfZmR24\",\r\n      \"3jtMbdY8cpns5kdb5AbLaa2JXDyWbx5NVRVc8cD5VGiF\",\r\n      \"FXevn4W1TLTuaFP42KDewLYsX91LG3VPRLQyT8JocvJu\",\r\n      \"5bcK2NZ2ELsJyUwNg59ZvneNC1C45Ap1xkS34T2U4wqy\",\r\n      \"HXzJq4kkB3Akn1RT7buor8xLarPQgUrBRV4N75da6Kpp\",\r\n      \"8pkD9rQwmpsuy2n2kzsg5Ui6PtibUrc9wATnH89k9WFE\",\r\n      \"139QN6SruLJ1EtkfdBtEfCYzqWxxV1JYUYH7N1thgnDk\",\r\n      \"8hjfc3r51Hu6EKRgBDMSUQz8EWrFtyqLnbDt8HkVbiAm\",\r\n      \"7BBGBcvnKUhGKrgMBN29k94AMMD55Pum8NbA9acWyoUw\",\r\n      \"4RHR2GrNrmiwsK5GQ5CbdWFFQaAEZmyP9J8CFi3ronwf\",\r\n      \"BRW8ozbqoXwarUB7R45noxwvoc8cMMN8HEgWhH2pZZU7\",\r\n      \"Dme3s2mVhg4iA7c4aj1LRF22PtRQ5DgpCkeNDsN6Godf\",\r\n      \"GuXGBsCbvimHWNC1wxAYYKtMDP761gFZK4NryStnVQSP\",\r\n      \"HWBJbdFfKnYorEDVzUAzZMCSwq17QDCVPeMEvLuzvCUW\",\r\n      \"AB4eM4HrbARFQnK7aJg3nsKLffCb1frEUsT3WamzNYpg\",\r\n      \"ABUzd4mCcewYiTHA24UxZQJKdd4Lq5fJB4krLmYRQXLs\",\r\n      \"5kpdFzwqSRWsUen1EM83t1i7PCPyaFyft3tVZkMroiEQ\",\r\n      \"Dz8Lt1625aPGRAHe37S7ShUxzVpcA96CAst9gAgzD6nj\",\r\n      \"4Yfao9b2FYACmustBaye5Sk96ze291AibpWDUfzJkh7i\",\r\n      \"ELLggLraBre5DYY7X9LpieqWyzWeFVfGsZrvJ51eZvnG\",\r\n      \"5uehpQPDFpJgCyDyooamtfsrZc3x5z9VBJzLEnrpHrGa\",\r\n      \"5x9FLQ5vshbuqk4RepjzH7yU5PqkeHTHTSaeURToK59Q\",\r\n      \"69SceAFqqnXs8jGzT75pTiTuZpr9LR9Zyf6Qe7jTJmSw\",\r\n      \"G6a4FkHHhqV8xk74yXe1TyfRxLyhsfHBhiiXmWvSPRQ9\",\r\n      \"7NU4xZpchZieS73MESU1EvKMykaEqfYm7gCufuZXS3XG\",\r\n      \"F9XqsA8ECtqHmM4hN27X8KFrbSg8nb1fTrSVUaV67vpH\",\r\n      \"CTC42jUonf6TUBg68NSgsd5f3oFg6T2s3W3ZNc1xouLL\",\r\n      \"9eKhNT92abhk7Qk3Z3ejqyG4b7YgYkkQMBibDtuaiPfB\",\r\n      \"ExbTzqrComkgJR5WfiFFcChRyeN4sRFCWcgSaCKn6Rh4\",\r\n      \"BzEDNenYNXgs3u9dvY8XipDuiXbapuv9tJkg33BrwaWs\",\r\n      \"EEpus3ah7ufGWRhDvd7fKXhMd5GiDysSwYB775yic5qd\",\r\n      \"7Ux7R3LS8BVvQgxw9Chx28A6mjeZkjhUgNM6GVuHhy9j\",\r\n      \"DiKeXK1o3MEvBbAs2iHY8gXwSqDFYhSpC96FuLGUqStj\",\r\n      \"AyuGTJj6WqWjFS3CRkFQ1QZ41h8kJqwqaNouho35qy3Z\",\r\n      \"CEhHbXa8Qw5YFnf5WYjs1aJ7X41RqfdaSkjjPMHdntev\",\r\n      \"6d5Xu4kq2VWjjvxaC5bBi6jRzHX5ipQHhnfpmpXFi5Q1\",\r\n      \"GXHefuWFEuWDKL91Rvy2GRgSQEwDsdpL5thWC6LJjW7s\",\r\n      \"7dWJV8pNxWtorfMcKtmAYZFpB9E1aXK7rmWzcgiGXJ3b\",\r\n      \"5hn9jeUnXBFrBkLRF5yh5Sp11LkrFG28vy9BwmS1SBwm\",\r\n      \"Dt8caYoLqzFJTMEEhJ3V2NprjL2p3TjSBJ6Lyx8VAvRo\",\r\n      \"Gm67VUSXcfuG69j1Dg9SkfYvcuJLAYXzg5MutdfXwXCY\",\r\n      \"8qL5G1W9LJK8uSRzbLLkQJ79NnFa2iye15CV8TGXTgZB\",\r\n      \"Ctbc1vttExqDBvBu7Zz95fsTHgArSqFPuJ9mAZ189m5L\",\r\n      \"9ptqLSSbvRaWV5WdAG3jhGTuwbSwVynv4rgYShFahcht\",\r\n      \"8VnNtpX8ud2YQREeRkidvA2UVqDMovenLCHaV3GCqwje\",\r\n      \"8npH5KTnev9MDbP5a8DfT7zEwmkT4vD5Nue2WdeqdCeE\",\r\n      \"DFn5JPP9DX1h2ip1f3Wqa3cQjXNj2bxUtfiSfnLr5Cub\",\r\n      \"3p13o6VeukKmkjVXoFu3hDzYRbp2gp73TBM667k1nbyH\",\r\n      \"EgY9wXPWL1X5bH8RNFFbzVUTLyavGiS1cN9bcwgNLUxt\",\r\n      \"6ZHdwqFpP9Ahdd63kdfBjKQWgoNub74e7EuNXmiaRbgV\",\r\n      \"kpUhaYVM1xLBPwTYYr2VwvXXuEyL511eQNi5btGPByq\",\r\n      \"4Wq84VNmHidA2qqjAmxtR3HU9sVzvez12JENWUsUMPaQ\",\r\n      \"C5Jqcutqe2FdHaVGgt6cY39aAgyyfjFbh2SLHJjAqswa\",\r\n      \"9rqnR6BMpKMkrTp76qs5c1L5nY8GrQb2yTCP9Q9mBKcz\",\r\n      \"5ktDzfZ3qrAV9dWbhW1SaKxQAfyE12X4zZd34tAuFz9W\",\r\n      \"4reoF9b9b1m82WsGKHvjhie9gRC5QzNhLV5qEw6sBrv2\",\r\n      \"AT88zRQYtsjc2YYvWCKNLHZML5frEr1u8pMu5VCLTLwB\",\r\n      \"BEyKqwvXcrDYrBiEzrHUCGUDZDQ4tZPyMJBwU2JX8MBw\",\r\n      \"GYNm9BmwKE7u5bUf53eX3fBfuxLCaWpSNP2wSEiJZLxK\",\r\n      \"BHcs7wuoRp5dWm8p7WVz8zuM3ygdRNDkzkjMRA7LNyPi\",\r\n      \"He3ejmwPpJHe6M6McbyLvFr58oWre4dEt4gNcKpqxmmC\",\r\n      \"FFWFyquoGD9R5GUB1kzZLvWyebS5Ws738YqVxMpgFo1f\",\r\n      \"8kTTvEdTYsmoKg6ChzboKSEkCfWSQ5vbPgHzmVp24s3W\",\r\n      \"7h7XmRMr8ssDLyNZjKZfzabuUWKc9f4bPtqp4wskfjQC\",\r\n      \"5F7xVn6gRpY3EAnniVX5umLZJ54BuwVacsg9XXZ6uVW2\",\r\n      \"9qG7SDCTBpEpkeovCwShYNH1mwTWbrHQDgvv4faZreSe\",\r\n      \"uTj8xy9xHL3hyuWHaGNDGBCvY6Ehy4sC1pa73CCh6Hc\",\r\n      \"6NdQ9S7jVRT79v2oCGARGfNywyuPgs2b2vC4TsdQkKiF\",\r\n      \"B7wtaH5eETHRNB8TN5nv2qhwYj4jruc7HAtJS6H13Cx8\",\r\n      \"FvvBrsyEH7EoUdQVETLWJzLdbPnFNvm6FgHFS8PjzfGN\",\r\n      \"6gSuNXX4B2mNuyuxjR6WUGUbpQXnUf63XMm37vvqGjSs\",\r\n      \"3cfB6UUDHUhoxxQCdmjwr5xK5FASZHJhFbSePUnaMzB2\",\r\n      \"AG6pJXmDjdSY4CTzCCsNT9r4t4QdBPZ7KgbhL61LzNwN\",\r\n      \"4TNDq2MKHHwqmoKhp9G2ZoxLtwRcgskLZ2VfyjgHubeT\",\r\n      \"FU6gFVxdaXYrWS5zv2WLmRgioctttM2CCbCXmodtzB9g\",\r\n      \"7XXtQtuHvDRXbPrJkjS5BikbrLT2txg1hEJsBPoSHwXP\",\r\n      \"35SeQ6tCGNmguivwACAady9sqPSaFhWBST1kPMMR99de\",\r\n      \"92Sfwm19oqGixw26sYkScgnefEnha4r2h9damqpfGB63\",\r\n      \"Di7YnWzbcwBuPm3An8Jeik6qW31UHFkk5mHV97teMCAq\",\r\n      \"655vdy9njzWGRztkBGVdpNLm1c62X7gVTqMzcMoQhfha\",\r\n      \"J23XyuzrXH1pA28AYzS8KXYMgi45DyC1R4hrmkYeuf5x\",\r\n      \"8cYq7dMz1XHyvbU5fZfLZNQfwBhwffe2r42zbZE7nJsc\",\r\n      \"6EK2boxNtEDhQ2pNpLbSPJUSizu5F6eMyWkXVJHMBw3K\",\r\n      \"HD1QWwm4UpbW8c1XK433ThUofD1UtgWrz5ShhxUKjSXz\",\r\n      \"7hYbL9LPcTiyCJ1938E7efohjRn2MUjeMvNZpDDGWtd\",\r\n      \"2tSHkLnGMWEHGh14M7qmvQ8Bf9BYZAtYcChAFJC7fXw2\",\r\n      \"H4RcCBSui259HFNhs3UwunJDaNjvUTmyFJC66kd4sjhx\",\r\n      \"BS5TL5o72Me1iiu7DpLz27EHHNUXCuLVeATEy7XjrTYV\",\r\n      \"6b8oQXGsyJX5iY3rNtXYBAJ2JAyReK8GWUeZ3kushiU5\",\r\n      \"dQHoic8yKfk3ADdtbb8oew9qPrJ1jWBU4HN6oWUs5k4\",\r\n      \"HrwDA4WKJbewmy9jx5zeUphYLBRofJEGpLukDX1pRjAG\",\r\n      \"HbPEdhgeYu6DHNfEjimTy383stKJihuGDUVA4h5s819P\",\r\n      \"4wgbJonQaV5oVvF5HUpDoMUgR4RAveHhHq6jG9DvjBHR\",\r\n      \"BV3pykt3WrBz8UV2NscVqo3R5ozeejnCd5R7VyyK3P8k\",\r\n      \"2eTPoarAGzsDKdtuymPbHH5fiQqf44Gssao6JnTDtUrF\",\r\n      \"GeZKkNSzGFznYxvjL8hzFLwhn9Bv6Nayh1ost5HBUsef\",\r\n      \"67BuwBzdknJJ7TBdXviCDr72DU9egFBFyqgG5XhUczpy\",\r\n      \"A3weAiF5ej5p9k2XNWmUP4qgwGK9WJ4us7NBN3R6D9sM\",\r\n      \"CgtE2q5QcFoHdWnmW6AfudBMVJyZyt2M8kdCMpjNn611\",\r\n      \"4UeWk776wXoN2XVM41j7Mtdth4aajH1Xd8a2pHg3UcFk\",\r\n      \"2FA5CEwHdEamzJfPjhiLMVTfsnEuswyRVETDt2NaGCqa\",\r\n      \"695doL7ktA27QejC6xTQcLuJx7XXEm9KuoFBRFGN5dfU\",\r\n      \"CbTCnqdqm5tVUDsLzSUTcrXwzekbeEQSFL459AShadXz\",\r\n      \"6CqFe6AYGnJUjek7Qo3chrNThUcypikGcc4Gcgdfe5x1\",\r\n      \"jL7zpRYeMNmqkpH3g1GdLEFpqsdwgZpPbjtEVJhk2rG\",\r\n      \"A3gdTd5rpVWFW6nEzhG4s3oJbzy3cjpTQBYG959KUY4V\",\r\n      \"5aLp6YAP4ACGxx59nN1Zq1QNdpjfYxTEnmj5oDdLn4HW\",\r\n      \"G7dt2t397DbuYUiKJaz6sbmy3o7UvftCoQtq4WcNygzn\",\r\n      \"54RnDtYFGdxasjT1vv24ieKX1ht7FfZnwr6kTfPpX9Nm\",\r\n      \"ifYssBDFtE9foi6KUDPihQAZyvBTCXaBMBKe628GGfc\",\r\n      \"4MSmbzDfwifTC8a2wcN7jUFtizhBiBxdCCEnX4JnWTGx\",\r\n      \"6VbU9SQnTjMyeVDQNohq3QiKgH4nAXyQuSuTYGor4umA\",\r\n      \"5rxfDJiVXo4XQpihkiECJSS4WeKxv4QRDHraQjgecW4d\",\r\n      \"ATZG1emZ7aLhCWZ2bf8328aoWYWvMUdhQ91GmuvkLXEY\",\r\n      \"6odnTif7xEk4Wn9pTbKhexcuYsJV13Edcw1hqRLft833\",\r\n      \"HutJB5FqhKX4RaoFtReEFW35rDB1b4KgCHLSTynisZg6\",\r\n      \"FAwf2v4gRpyhehZfTv1xmNMFwMvPPuUgxhrExfazQWJ2\",\r\n      \"DNtta874P69XhAxkeJRpVkxnMgQo6XoT3fLFMDxJMCj6\",\r\n      \"Dq9XpGd6mwanLfUEUnpq9AEFAhbep7uUBvRHTvXMenWr\",\r\n      \"H62DTLD8AqCyHT955fSrMYpq3AzwjFTEeJvdaZ6HK5ah\",\r\n      \"66Hid12tWZZe2GPmsx58KXrYfo1qm9Ki1cSsMEC1FQb6\",\r\n      \"BjDURbArZNqwiEhrHH7FrNhuETwW7k5YyVcXneSUMqDf\",\r\n      \"BuY7chzpHDGsheDMuTfmPKpk5R8hMa9Fj9iRHArTuLnH\",\r\n      \"NcamuTEdhY6XnmJrTB5eBenXweEqxDCQ5ag41M3FeBB\",\r\n      \"2KRZDY98X495R6JVjvGFJ9SD6YHb6StiNhhLmwkkn3WE\",\r\n      \"7e29nX9A9B6ti8aV8pFpAXRqX3N3deJAi6NJoK1KSfu9\",\r\n      \"A5EEzWVVx5JEfsvXJVBe27RFWUMTH8xuD7xmFcEgpydC\",\r\n      \"E5uj3AXTQ5eBJJU3U211Nr8DWBzoyVNDCDZr7RbZcbXZ\",\r\n      \"5yuYTbCmnBkZ9VTJgKXgCvrfFBA6ADKRraKt9kmrSf9X\",\r\n      \"3dULywUx4LTquYzFxJDmfCxVyRLW7g5rfjHJYdr4izJz\",\r\n      \"GGDndyT7zpMnh9Rvxh6WdPqMTHYVKvJXGApM7UUUtQA5\",\r\n      \"HR5C96Jr7LVHxHfcLzqXxwrotuVJzQEDuZViHr3xcwwA\",\r\n      \"5ARwyfGDmvtGkBsGwm2zGJ2hHHw9vMedWyn9Z1jGvZzV\",\r\n      \"JCX4bSyAbg2cr8rjPqbBzugXSbbtA4JvMuus1UaWNUt2\",\r\n      \"8k8rTBXnbR8ZYJiLwN5FbGGjXJe7psthLeH4PNpcTFPk\",\r\n      \"DSv5XGp6HksqaCYB8fjYvPaghwwNzYLcT6vT7ZteFFFA\",\r\n      \"BP77f71qbhzQ2XWHgugqyafMmtJo7Yzei6CW5pdxwhiK\",\r\n      \"7jGgWAgMXz56kz8Qs9XEWWvkBNduw5bMoqRPUi1LSygh\",\r\n      \"8GGtXU7zmVvxpYuSoW82ariVcjEd34uQpwieBXXYFFi2\",\r\n      \"DFUfZjErFTj8K7oNksf9SqSJM4sCkzHXQqnK95VUEKe3\",\r\n      \"BJKcgLuo5eAdktCVFMeebsLXMQWfMuZ9Q7k4VCZWiee7\",\r\n      \"2sFryuQWkie77TNbgFMZTw3kNrcjgQRo6BC39NG83WAh\",\r\n      \"43M6hnU8L9fbBaqZGR33mGCm9zS586k8e9so1156xWr2\",\r\n      \"A8YNFKyBYeKNfLYdHd2va77nGuVS8QMUypNHLAjK4fVv\",\r\n      \"Fq6c6wHM7pWiSC25K2eCpcJP8qZwzhoXQ92GHCYN3BPt\",\r\n      \"5SDAatXUCN5dGsmP4XenKes7i2TZF3c9Lr81jgW5EuCi\",\r\n      \"CWPSe2VJRmYG49XXVKEtQ3sudKWthW3TqCpbziuZ78zn\",\r\n      \"5BWP2y1ARxxZsbinpfBr9umNAQf2G6W5gR6J84GRPBoJ\",\r\n      \"68RhyM6wPWSSLAFP5c7WhxvKTPJ38utSFV4CeZHiAGo5\",\r\n      \"29uVCqtB4gd6WRjMaBVsitfsTtiFmz4pXgLC27mFKx6w\",\r\n      \"86LuSTq2LecFxDH1EyLMcUssH6NmviA3qZDsaCYH3fdW\",\r\n      \"7yFn5Ap1DonQdaoi8KDyDy6bxYKmcsi8sWzsjdCAqJ6p\",\r\n      \"EUVqi8fUrtQeE73JPEKsbduCf1qL7FgZj6ENhidCKLBa\",\r\n      \"5tyLjsXvAFaT7aRxjhvPrQVgqHj4TdWhGGRJkNfafRY\",\r\n      \"9qsdp9hKD8S3374d5dv9LMzQmBkzL2n3XAdTeYLXmfrp\",\r\n      \"B3GGz2HUxteoBnQxj4acyzH6AQNwqRcct7nZymptEtQZ\",\r\n      \"EjXi4mc4rxSGjdM7Ni3jNu6DVXRpFLB4hz6okQnPtZiW\",\r\n      \"EZQSj9Uw3WpKxsjC2vWdrKAPBFn3Z4xemPsy6bYtJQCJ\",\r\n      \"FkgMEpo8J6NoyXvjrHtM9VH3vKvirgECrB82bD8SmcyA\",\r\n      \"BapduEsgwbEUfZRDy1Qnos3MPija1K9QdjmHpwniuuZw\",\r\n      \"7Equcth8kkivuuyJUyZShMv8Raz8uobZ19jf8vEdjCkt\",\r\n      \"EA4nTxAsDoxDAJsa6Cfv8nv9K8QzQh7YZqQ5ZPpBcajL\",\r\n      \"2gMfWhUrLcsohnwTpXPeSDhuVpCE7xctkhmsrqWxnTkC\",\r\n      \"34UeCsPdczqHY6NBfnKPszcKj5S54ZWrxmYcTUwm2X66\",\r\n      \"7Ux9myzZVaqGJhTJZjyHyC4EUEUbkjQEoNHHSN58rxw8\",\r\n      \"8wXwCs7RKKPjGZ2ctV7y9ndqs2wofZ4cmeTp7m6jsJcw\",\r\n      \"3969pQNJFyuWHTALB3EUH4D1JqfuYDBhhUb9bzcSP3Re\",\r\n      \"6C2cBPWsEE6DhVFZfLgyCSQ9yWRmdbiZ4PKgN4PiNTkV\",\r\n      \"2MDPPWABRqHpeaTrmZXUVTP56zi6YC9pbk5ZM3AthGs5\",\r\n      \"gxfsFmi6b6z1mBCqTtKCe2GFPt1ZWvHGVKqnhFUGZNi\",\r\n      \"9bBk35Drgf1DaP1QX6uELryH1vLJXscjEgsPnMU3HHdv\",\r\n      \"73entcU291vqwxFJGhC3PDukC9Ess7pZ3v6NXv2RSjCU\",\r\n      \"HbkFfiYv38wVcE7JEYbw5L65y8LrzX13fe3qS7VYizdP\",\r\n      \"64uKic8CKGegewuJapSix8rpxxGFfyg63oVoaS9hNJRS\",\r\n      \"7S9xDz2FWmu8PPVjrB9L8gV8863DpFjWwAsWg5QV4r3K\",\r\n      \"BDjPBnvRZHW4Tkwa3UTLYyRJ8d83Tw7MTRALAiLHEo9D\",\r\n      \"CZHPzsDxdoHDQheMw1zSEsb6Mjtzes9PsedJQWxuTHQP\",\r\n      \"4HgWiNfqzrkXhUkaLuxR4h3MhF7Nr3iFcczEHCbktfPk\",\r\n      \"HBcsAPuDwoETxjowgQ5BC28N3f9LQiwDGij1sSzwh1nY\",\r\n      \"FUVsr1xBkaHLjivMqzHmALJLx99vEXneQZtzi4AzX9GP\",\r\n      \"EKLWtj8ztrHs4YjRTUSZp8cvgmC7vXZJPu8N3u2kCMNq\",\r\n      \"H4jLzASfnvpdiE4muqipWaJhgxqomAHtk79uoohYxJMA\",\r\n      \"DF4unb4M8FYK3GkvqArUWwJt7GwWDotah7nFTPvnLezs\",\r\n      \"79Dsq1R9pFgABx4bV6FLbgn2zoiPSNbonwEPYhz5zbiA\",\r\n      \"3QMGjmnqate4j31jAWceFw9SvXLVpY1KhchxpeKpL5VE\",\r\n      \"FaRjyJVf28gSi1i1duwDvNrs83VjG7JhwwdtLhRDuVqi\",\r\n      \"7jNyoeMmBxx64dri3Lsu8hXNEMptFr3XbUXqEcrLyVZJ\",\r\n      \"7J9ihLHJmfgcLUQpraXLYNH7xAVbyd7o7BYieCYKgibX\",\r\n      \"9A2Tr9zv7uUraVNvouYz4gJ8zfdars1e3gPtEvBJdwwg\",\r\n      \"3QoJ3cqrzk1ocggmEJ9MJ4ApZYUJypfzCVHkmMmZDCrA\",\r\n      \"4FVqMaR76YH1jiS4Ncr1LL3JoeQHsJ2xfwsK3VgfRx5p\",\r\n      \"DPc5mKujcaLcXYQCDujsRN4e5Ps3ipNNFRPAyHNd1vGp\",\r\n      \"FsF1ADgFcSSDnuw1nKnLas1sZ2wJ8TVYpJbdt4FLGgUb\",\r\n      \"HomcugqGjc5VXEGDUmnEbCpCEYLcG46mYmnxUqhksDaF\",\r\n      \"BhHhwbJ4zvGTP6nMwmRKXVtovhfJ9qJYPURqwv6Qe5SX\",\r\n      \"Ei3LguS9MetBuRow5qZ3Cz5rbkQYUGnYKkB7DqsbHgEM\",\r\n      \"HQzdBJgmucyt7u9rgBqxvvAEo1AyTa29stZfjf78GrAe\",\r\n      \"EcU8q4V3Rzt1LB6BzfjgtPq9YxbQkTJJ7s4RQEtUqNmZ\",\r\n      \"9F1VuTdZSuq1YgY2HBAq32WXrVbiGbMutQSMJuThpJmD\",\r\n      \"FztcEEwErsWb5RMdrr2iHeWyGRNpYMyoQGWQ7dLYTgmj\",\r\n      \"49BWyXnynXFp949991x2rGYtQ4FGeQB6pF1vDCkWhTdi\",\r\n      \"5RPjNDYAaK57sXsbxRFZq4tSjmrzqq19b52xkHRygVcJ\",\r\n      \"EkF3CKuY8G4mTZGKjSse6HJYX1P5o1ZiEGbh2YsiEWne\",\r\n      \"FAkXzK5221NsYhMTzXxQrwtzawBZUja7rnbFeMYSSD5o\",\r\n      \"5bqmx4LS7xchThSGzorTmPfnTrF7GeiU9hf9pf18KKbq\",\r\n      \"HzNvfM54zeAXHPtrtvnUD1H36RUe8ERbwNDPM8f2U8eb\",\r\n      \"Gfm5k1uRJdeC5c6PXreaxEcDnv5173nQpnZS4fjdHjRL\",\r\n      \"8nn7KaxA2UcwFrQX386pqGM3BWmSCnAHmnKSimtoDVi5\",\r\n      \"CG4o3DcNNQbripbuKshGJvGrx631rg8TQ9YU4kpudMo9\",\r\n      \"7HG5pFw69rr21bn365EpQFADJtQcigy9WvvRHPguwgrS\",\r\n      \"3oSdXhVWLVZQVKyQXTqgJftaEDZ3r6Sem9wRgw9MzS9y\",\r\n      \"4ccMzyfSJwJcU9UMgjD2HxyDfaC4uzfNyfVk1Xujnnt2\",\r\n      \"J9mW9iAHouRWKcCbiBPhQriQW9SqQKmkJ1Sjm5XJHvKr\",\r\n      \"DsUo3FRBwXFU6nvPcUcMJ4h2UeKhWgK4rNr7aFgXPJzd\",\r\n      \"G6S6JTGyTr2NcEx5kTPwhuwyhYLWuScbgQhnio7i1Sh\",\r\n      \"5cGnCQzecNT1K486V4TJ8chzh7vfHS3uqDqApeRKQfYG\",\r\n      \"3DAynoGBY6cDHauYsbyvNAURbRceKwhNXvBVvsSpN6gm\",\r\n      \"4opUP6LSSHbQnNeAs582pjqfP1tYKgDtUfufNg58MXgb\",\r\n      \"DbVJKFEQfRfC4jtbw8NxozLpWrZuw53KcBSCuAaRjjGB\",\r\n      \"5ifHcW6FbG7bB8JrDjJJNeRPf38eoN6SXMRum7wuEheb\",\r\n      \"AEz8qrxiFSLwh1R7cxyQf9cZyYHFGhftY4UoriziJJUt\",\r\n      \"EUqMtgUnGkCsD8f6XizJ4oVKVwnzE2wh6P8mGFDgBw44\",\r\n      \"5Cwe23Vz3T8N8oHqjYq3mGuVsBcgMRmkYFdUrckxxtjH\",\r\n      \"GXeWtmWV8BrYCx7m3yZabmFYhBwP6AA3GR2vxFb4QPVY\",\r\n      \"AvsnE8EuZ8Atg7ZAziWwYqWHiFhQwe7t3LF4AFmRVDqp\",\r\n      \"9nxW5G5Gf1ND2v6MFxuALpAciCN4eh1t1tFxiw6Q9CSk\",\r\n      \"BmehB3K1rdkAxpGRyHcdcgRNWLK7Agoj5et4pDzi5nxq\",\r\n      \"13YbHWDU4xTu6J1fo17KUDPe8ngRCYV7xzS9jgs43tkn\",\r\n      \"2nvSkJt6xJF1b47NB2DihgQVCWWVoVLX85Spu2ezjgfh\",\r\n      \"HQ7NY1bHoysoT1uHvB3Nys6H68wPha7sKexb8m11LVmn\",\r\n      \"BQqPLQjBsZ52skQAEYCTNJFh9jpfPmNiFxgFfZZQSJWd\",\r\n      \"9xoHS3VhAdzH2mF6ceXLrbqg3fwyibQGWzktS9pSTuSA\",\r\n      \"21xzWQNUPhpZ8MALo6vjkPBzYhLfevjNnRgg64MVcpxf\",\r\n      \"BYi55RhrWGVPd6jNfGYyy1sdpQsyhY2u1KdUxyu5M5BT\",\r\n      \"GhzjAgaJVZ5vx7kL486mUWozuyZVBcyeGfww62YyKVvD\",\r\n      \"HKcDrZUhLEJtTz17Acg2214xVp5smrMZDkZngARoMsYz\",\r\n      \"FuYDnsHnRfozPWAHj4q5JkWgTT9HgDCnfBZSroteCrpn\",\r\n      \"DkgunmvAobF8fbF1inixkUWnA6wNvi4F8p9i7UC1buqN\",\r\n      \"3aXhSKrtDoUZwYRD95S2W2xcE9zEkEBg2XQvDGgopEoB\",\r\n      \"H8tE8H48zi2M12HkJHSDLfNpzt9nbnSMncGmFPrQCP7b\",\r\n      \"DXxAw5pEW4F7tUfGKKMcWyjXDNsVYQJTnQ5CHPE1uht4\",\r\n      \"2Do3ZSDUXzfaiaN2KfBQME8BRkTzb8deKXu6GmTxb4gn\",\r\n      \"DMCnAp9RVQ9EZiHc2YpPCCgmXCx5Pk6mMgYQXhTFTMnY\",\r\n      \"37PHbpdPBD49pdp1m4dfVEttzbD4ZqoFNdhC937NMxtN\",\r\n      \"H5VxKJ2V4hWhskGRNUvvkgshgo37Fc3gJtEAKnaJYaLL\",\r\n      \"Ew1QQm9mY64Qar6Ct8pVtLiUr5UvzZvmjUqdUq1Cp3CS\",\r\n      \"6Ad3Bmxo832QCm2zqWmbKLRnpfRqcdL3hm6fTHPaKxga\",\r\n      \"3zXTvE4D9nrC3VHLP1W1RnWxG3DnFi2ePabfzZnf6F4r\",\r\n      \"39JvBe4qQnaGLKiZxMTKGZT1e7h7VojYyHch9Buv2bAj\",\r\n      \"8fQgmPV5KCPzFftDeQPP6VXsodTnhKcG1khY91WbT81M\",\r\n      \"H446c1TjJS2vopreRBGA1f61ErpBv5trMcvZV6R95bcx\",\r\n      \"8M6CD1kiwM5v2UTPciT3Jndfd7TWhbQaYHaXgzp1Z8fs\",\r\n      \"5oEfAb3PHNPfcrtddEk3HKB6f15tJQVTRehMP2v77M7n\",\r\n      \"8Z76tabw8spDouAAH48MfCRDv9vSc8H7cMtEas97CPtF\",\r\n      \"5Xkg1nzeHK7uhvXRK1jeVAsBVPRM8naDdyyiSpTkkhq4\",\r\n      \"5sbyLvySNj5oaeasy8RqfAujqF1aDaavtMH2d2JuNZ2j\",\r\n      \"B1vize3LW3Hmc8LLUweXmRuX5VZSkWt3eLuwmV6FAXH8\",\r\n      \"CeQLvhYyteBpnErkMrE3jhoAdZ5d2vfUZAAmYgFJrCCs\",\r\n      \"FQREWzoZ9kZRXWAqqzxseWGJxCHJdcwi6fdfQBRBb55y\",\r\n      \"21tHZdepFifJqwG37r5ym1Bx2Ag77YBpH4vaKNgHL1xw\",\r\n      \"FkpqqRnzMWh11R9L81x5XfvxppcZyBGoyu2kYefCp53n\",\r\n      \"Db3rXQp3V2PmywHqfbtUo7GViCCVfk6pBJBBKKCVAdPu\",\r\n      \"EgvUZnwtJRUEmn4qnKf9PKrrXCVxxeuq1UVgmxrkuHzG\",\r\n      \"67Wjx6ZHjGgMUeSEJpe5nU4uqSse1ni8HacRShegnFZu\",\r\n      \"9fEc1aNrh4hwphjcHWbwcr52bh3vYcEuQNC6kRPhNBzQ\",\r\n      \"5QRKX2jS82h66CU9oBPtc8753JUxuYcao22FHvAdXm6H\",\r\n      \"BQRbkZVAx1f7K4wM2hFHGcUYi8kNsf7KuJpNBBGVSkzV\",\r\n      \"6t9soU6zRRqu2WUHruYx9v4YK4mLN7reFdcvzvNrMs3P\",\r\n      \"5dXsZ6XvS2Bt4BxVExevEgohQ4QzHVsL99rW4rLVFdya\",\r\n      \"5QfBFBUbsHFiYmQKytUZKNNehiKRsbDLRTocTerHGnnS\",\r\n      \"9Sy6adtgM4HgaGJaYBRDPPJcZn5XVmYXAtJ1cWbTRMF\",\r\n      \"2hg3gyMmnYQ6ZWpYd1xhX28EKUrNaV2sfbbApSWVAVQA\",\r\n      \"EtvmJdYighbVgSzrbAVG4BNwKfoAHj6nGvWx8WxT6xgV\",\r\n      \"EcqN6XhAf5j6TQ2gPLFrSD8gSK6dxxXb4K682NhxgvMh\",\r\n      \"HZKcztGg9dqqxJSL5LuogsuPpVeGVTJw7UoTYyW2wELj\",\r\n      \"3fD1Y4Js7rgZwbaLT5M9tWsrxS58sL7Mjdq5KYD2eAkM\",\r\n      \"HK2Dk6vkfyUhYvamQaUSaHjKQTMaiqCA7RnSsTRCR17q\",\r\n      \"8UWy8SdkhorkKzdKLGZXAQ51ToQk3SeaTHHeqLf9JitE\",\r\n      \"DnAdMUmRsEiqsci6wPtbuDrYNxy7gRJVBncPoxHnKrPn\",\r\n      \"9XQ6uZWJ2TKage1Z4NvrVePqEShhL4t17TuB5QwtwZZT\",\r\n      \"9TQR5iR7BsZRg6x6d5xAiXf2LF5Wa9cXf67c8cYanrAE\",\r\n      \"5NfH4NuCtVeGQCnAU86HV7K7yWSLg5Ph5Y9Zt1cPgoi2\",\r\n      \"F3C6p2zHuvDVeqN28ZTPVouEBMpi8kv9k7bK32XbZqro\",\r\n      \"C4nkNpiSmVw6LhsZUcnveNRCASjCvR4PZExLqFgjSfZ7\",\r\n      \"8hUkWstHZzx8LeG4YYqUec4fR9TuM13GN8jRod1JdV31\",\r\n      \"2LzSquMFTEo1r1CaT2o38YzMEHZVT7kVb2Uwrgxad4z8\",\r\n      \"861Wk6T8Y1ppcrLaQKxhaa32cN3Cv1Hr8BufHTJtThaF\",\r\n      \"FfdR8vjXdYGygk5kzQAQsdY65KqUDt7iJ1SRiFtX3r6w\",\r\n      \"CKQXeK3Bv9KuWNYzMixGwQfu3PcpNnHtjBLggygHYzL2\",\r\n      \"bqzgbXESPRpHLe5PSDnyd9AQ4SBQc97faVbqQTqZVmw\",\r\n      \"2CjfrDvR7Ty6gAx3C5UTs3zMCYxQc8ddFxyisZk82BnR\",\r\n      \"C5pwPjZQsZR6Mtk1o9oSSmH2osshc4YgTq873ACo9Shy\",\r\n      \"Adg77d3Z4K4fLRJWp8eEntnqzUGCG43PqA9hgDztqicK\",\r\n      \"C3nUMDwTgVAkk4ckQPrDjPD1i9MyQPdkKiXSiBzPuAVx\",\r\n      \"ETvXWrjAToo2ExnNFRDYGBb3zgTbx3vVN86wf7URDVLp\",\r\n      \"DKQmvn4GBHid3fkBKdDLfq5MzNMGmVxfon1oqvh5wWwj\",\r\n      \"GNUDyjKUXQ75y8yVBKu6d4PxFxEsNZp5gmEZJXWUMXsu\",\r\n      \"H8i5Kt7AZk6udQWZFuJ5ZsKJ6YUqfffN1QoFBYkgdtoH\",\r\n      \"4XvvrGrpSei3a41vj4eaZRdQ72rUB7qctdcyQ5hkCcGJ\",\r\n      \"79bt5nSRsnDVGTNLuA3hkXTfuLyfNzoydzjn28yp4GjL\",\r\n      \"AjHKxzw95hFvKV1ThUs1gBMnqvBRAUX1avMcf856Lah8\",\r\n      \"CdpoyaVkrnJ1nFuGFsNjy9mGexC8wA4SzSxy51MR56pn\",\r\n      \"Hc1JBM5FwuKkiz21HbzSqPLLrY1msk6dDJPRKhTndEyA\",\r\n      \"9tCXd6F2m5iHW1qsYGZXctceHHiuFCo5ZGNDimMk93uQ\",\r\n      \"6yiMfZ1ZpBCcpXGBKYFdwxMBtvy5ARhRjSUCMGgrmbAM\",\r\n      \"vU4B6USszMZc9z4N1ZFSrAP34zHR9x8Kup6dRKtd3w2\",\r\n      \"8xK9ehUr1LEH1g4i5Mto8m1xW4vHpxfjuv1w97yS7XRd\",\r\n      \"3RahQ8YWAnZp4pqwqZZ8hVC5NytyjxkGfKVbWjPY4Ecc\",\r\n      \"Er1VSTrscVgDXrW1LEYoyGHKbPN15WWocvNTeEsrW5Fi\",\r\n      \"4Rddgn4HugSe4p2HPs4PL3eJyPnmb5LN5ATRozBvorTx\",\r\n      \"9abNxSCfKWKAyHzemk6yGDJ5ur5Rr72i4HgC9uqZuuHy\",\r\n      \"CsTnHXqvLmTeJXJ3hLp41DVdNSn3x3UZ8RN5FFwAwDeQ\",\r\n      \"HEry1fhkTmxz9N6EUi4VSjrUSr7xhqD31uQb3X1ZeVts\",\r\n      \"121dv3ra15Qwq1AHfYYQNFXQmkEU31csCgVuAy3dkYVP\",\r\n      \"DNta93GahEGM9WLDDiVpEjXsK7Zo3LaLQbUyiQgfGKf5\",\r\n      \"9Mtip7onCy4Fu4D5CBEQVkvdp4nxz6crstoBDwq1t2Ck\",\r\n      \"XrW7caWsoVuux6A9NnzwbNBivYHPBQoTyTtvbvEQmwF\",\r\n      \"H9zT25SiXzcM6MPPpk1eiNytUYMiRXt6P8ngaKGWtFAs\",\r\n      \"37qry5R71zh63CRFeKrtLh4gUqVg5vFvyaA9J5ND95jV\",\r\n      \"DopLkMkxTGRdRvav3G1Y7qtUL7LzRdmeuWfxuHFUQtAV\",\r\n      \"FnL5Cu1DYpkBjaj1wEiEJ7HXtoNmMZvnR9eJunmkHLFg\",\r\n      \"CydMbEsHdLdxDvCeN9mhFSN8FdN6B61zBAEpunbUCpLZ\",\r\n      \"5nnCvFDFSr8RrBg9p8RYcgXmaesfcDc4uYv3WDsUpJqg\",\r\n      \"D83wMK2yteS8K33gdZyWsWaRfdyPeAE9HFQJQf2iPmgN\",\r\n      \"F7thEeLZpXm4nkQRY78GEwu5ixHV1RCyxE4nbM2Uhizk\",\r\n      \"5TgPZyXdBvhEU4BecwXM4eBFQemq2NfBct8WJKRNCqfw\",\r\n      \"9kHn2D1ZeL7eo5zLUeGp4HCSZVF1RLrExzqEHotaHxhn\",\r\n      \"E7wuCWCfBKo1mr7vmqTzvDoewTjRVe2vZVUxX6jhuf1Y\",\r\n      \"HxzPmqgaqSNgrwWd4RPZspQ5uJNw3DeEZGokGXSPQZVe\",\r\n      \"G5dzQa6KALNK5vXPXsk58NTMRmGFjvzTx8NWCGZAKGv1\",\r\n      \"Eh9916KDtBgtVNB8AcQ8rgY8JjxezsCBq3eARWW572YU\",\r\n      \"D1raQvXrWK2ecGveFRRun6hm6tyDUsHKwVbLagF54Xxx\",\r\n      \"G1FotAsUQKdvq5U89tA3H3smh1XjS7TsVvHqz3Kestc\",\r\n      \"BVrdB6srhrQ96XpUBjnYPagugfmSViEtugjGXo7ij3W5\",\r\n      \"FLaXWSqYgScC8c7uxDbxb6FrNYEiMT6T6WJ3QnzTTb4a\",\r\n      \"CsSCY6ApcB7e4zqhsNDWuVMkpRVdXi5MecWjR6oWvvLt\",\r\n      \"83d1r39sguraSLzM47z93UTnucGyUy7f11Z1eTjL8jMd\",\r\n      \"AuGPM8nEApNkU3nzrm3fHxDqiad1P5MNFsB2XrJSR1d4\",\r\n      \"FT1nhrfFDYUntvHuU2x6tmNgwBf7ek256UmHobYh4BmU\",\r\n      \"3ufCEWA8gGhUN35Vx2ekeFBJTDVivH4YqWtoGZrk6hB1\",\r\n      \"EtDEzuY5XmvTqBEMP8Pf8xTGsF6SkkJKfVfaNju95Qr2\",\r\n      \"31bLL4yw1mpoPfz6Vi1oa4Dw6DmbPMEjt2uomCVjg21v\",\r\n      \"J23sCP3e2CfQWmqj4vKHv2DEfsEGgAcUoju1tgLS6BKe\",\r\n      \"8TRysrSu3JQcqX9oLFg6f2qhPXepUN4L6FgBo38EFwzN\",\r\n      \"Gox844JegoGc7QuNRvHjr4bMPtBQrZCW1thuNghaBeM8\",\r\n      \"BihL87FAdvTUAyU88JVRo6wgdiGwodCWkwx4W9qPVLv5\",\r\n      \"HHdPwFgmDm3CyGXiCrTcTDKaCzAAcHDgBCRd6ZJsAHzr\",\r\n      \"2z7TjoChSVzwZQfTsYrirTq7F2uQqMdoepMHUAEDAvEt\",\r\n      \"EHxXQaNUiVH9okLGfCYxGPqJZF6F3fWyDyGXzVcsvwok\",\r\n      \"E5UJHf2nYJjTnoG5W5yzy77QDya9ie4AhCUe4F9o9LsX\",\r\n      \"BRCB7r995d3VHH8aSVotYuDuCtB6Kd2EcNpB8fTUsm6b\",\r\n      \"EWYiwtAZNv4ZP2s9zKqmChCY66t7aPKaYNwt4jSViG8G\",\r\n      \"8mEwjhqvvjmVK6fFHS35ECJSvhkQmS85eNEEsykmu7kE\",\r\n      \"59rn4twbW1ig2LVX8zd4xU5EexT6z2ufsJB7uppaSvdc\",\r\n      \"Hpi8kUy14dBEdFsQ2PsB91Rt5wrGVtvqLUvyz7QMSjP9\",\r\n      \"9nMNCMv4LtuJFx89zjTcdo8hkSz7eHojCa8fcrQWdm6\",\r\n      \"36ZvFEfM1PSbhbgkpgfS4DAu5BM37r46Tn7N6ATAwqRS\",\r\n      \"HmgLAvFYMZFaQ14o2rroQWxryx7Ve4uWmZtBFhNQBorD\",\r\n      \"4JtUbgT5dUPdGFoVBo8PNGxcUyaifYQwcC4SxstvKX1y\",\r\n      \"JAQSj7AN7C4ZfQSQHDkb3Z3y8qiRe9qCcDuXRVXtxiDJ\",\r\n      \"5iCDGm8cAQTq843usBDTWWnetp9W93HrKh1vA2PXMMs4\",\r\n      \"CCNx6YhVSBi1ePbagjsQMiAeMRAa1ZVostLQCBMdJKsf\",\r\n      \"DciAiyv9Y24is1QSByQLQnfAprNqK6hQqPwJ3SvVFrCh\",\r\n      \"EPWGwAjSJwnJ3jX6XjqgXrmVRMP7eYn1putz1gt6EfnS\",\r\n      \"Dg41YpmLbEbaoZxkucG2c5hPhWD2Mbo9AuyhLJ8wPiDB\",\r\n      \"3sePEuWVTGKuwfLN46TWy7VC7btMsoREf2ZCCHophJca\",\r\n      \"8AuGR7aooCJgCfRu9yR11VX5etPmUX64PVXiJHWNG2xv\",\r\n      \"DUWDJBs7yyrxqN1kU8PL4Asg9iQE1HsgZpvHGYcPo3nD\",\r\n      \"XpK5BfgLcd8rkALRkPGgs5F9bx25kmatFtdhByjNmsE\",\r\n      \"3ni4wQvNm2Rqa311oiSFRznZEbpb9nDWGfQB7uYihapq\",\r\n      \"BZqAba6k4QuKxzQwvNsa5PS8bLuuHtyqXFXRgWhgzxr2\",\r\n      \"CdUgAcF8xTLry75vnk17cTryS7HBjs9o2XDomq28sSdp\",\r\n      \"FjboLjKDuPe7xacLEQyherWiiVdHjEFjnsN3uSNwP9KP\",\r\n      \"B7L83Zf3Co1k9HzAHXbooW6qAkQ8aFDXeAHzLcCSykEq\",\r\n      \"8hYVrKq8pYsVAdas2rEPcePsWDpwAvwA6iGqeRgGK9hP\",\r\n      \"3NymC5afbe7Nm2zsUiTRwdPq6BDKnAQhKMqMhQjLqC9r\",\r\n      \"9okT6SVxxSeTqtX6HsAyRtzqcEFEnkmYMVfApRyoSc2i\",\r\n      \"GucBwPndAkyfSFbfrB6y7Jme3YJ2z9qwzf2XjoiebgiY\",\r\n      \"DnX26rzRCypg73xeDE7ThvcnyQHpVrbKVXk9jDjWcTYY\",\r\n      \"nUh7fjoW7BpT7NA6SHFWTWzfjEXLvcaSN7LikcRo6KQ\",\r\n      \"ESdEZX1WQJzZfBJEEcUH3nthpz48pVGrFmGMVTbvEvpL\",\r\n      \"2inHiqdL7dyn8dJntquU4ogLMywgzm98oufNgZRa1tiX\",\r\n      \"274w7AeWbZMXLRYdL5k6kiXaKYc8qYi5wGpCN4ebDrdW\",\r\n      \"CBJu3oLv2BTMjWxpsL3hiF3HCwQoQarzy7fAfdMxWGfP\",\r\n      \"DTCmaFE1kugoJMTZ7HZD6ScXsRkbZfpubzGVWKMZqFPo\",\r\n      \"6QjjzuXDDe8tx6bQ6Qsrtx5PB8FVa9QHGZL7PLVNsApt\",\r\n      \"Hm1czzySnkteu3274JfhAjQbdydEZbVM22E4YFPu3n6q\",\r\n      \"pb4XWdTNgGfk7sLBxxVcoWPjrQ2CUd1DnWziMVLnUFk\",\r\n      \"AUDtRpvMFXTr1LBQf7QnuJ6Kh7XuLvVpUPAca96WAfpm\",\r\n      \"2k3v9CsBDCXhHvXXG8F9xRSHtb3nFzdmAMLCQrbpUCaf\",\r\n      \"7ZzkUdvARmk96Y2neHWfxJqCru5nT6fLTvCfUTiGYA3Q\",\r\n      \"E2DCwKuJwCf6x5PfNP5Lc7xYoiJzw1rWyTrRUTQNeq4h\",\r\n      \"CBjyHgtHtu9dEnxagyReVZGfGBFXMQd3g6moUtrqceCJ\",\r\n      \"743vsqyDpxYKtLihPgDr9Ajr8MmJCJd74fw4TArSi7t2\",\r\n      \"9zqEywSzaecuV82nYJ9RYDbAtrFhDYQBL4YypNuSLGAu\",\r\n      \"5iUUTh6QibiiV4zCadKLUHYZATZmZ61DpCXjozYaNudB\",\r\n      \"3dE6vZF7ribwkGbkPwvZbv8sCgmKdMoCYdVjd6pNRoDC\",\r\n      \"Arq4EEnoiwZreJPuZYHRGgBraWDcQxHDHao6DHgsNNX5\",\r\n      \"BCtSoQVK9B2qGkwLMtu9Y8GuB9QoSAymHnVGpB7Wwhg5\",\r\n      \"FLwDmnukvXKFaGFSPawTJC8FGAjQoJy7ooyBHkfUWetZ\",\r\n      \"2uScdnrGKtBtgD3cB1X85dyMuYXnmB6bZ3TceenExpsy\",\r\n      \"FhD8QVMEDfw7DJdo29aSvkg5CyEVgCDkP13zBmPB6Kis\",\r\n      \"HqXEQ1ZkbgNDTsCtaH5JujzyaT7VCQwenU26WzGLmG13\",\r\n      \"9G2YP1rHYFL2idyLgiTpnLTwxua9PysmT4UESMCqaqwn\",\r\n      \"7Y1qXzZNRtqtXLBX7f4w3PW2oxgbYe2gYpvSCMqT9cKQ\",\r\n      \"BuX5T7yiryzUubDbMmhDG2XWVrfwsUtNb7f4JVFoveWq\",\r\n      \"7PZgcEfUar4i9A72sZZNXtNGxr6JGKPyxGLxjjssNFZu\",\r\n      \"CBRXXHL5Rqj68mCzASYKNboznh4kyBAWxjFBJomDkTai\",\r\n      \"EUbnYASvpqxbPPg5miCQABiq4hdbTwWjyQ4zEu9L7BE5\",\r\n      \"GSGrLzjTWoHrfCcdqDieppawHY7ogAWB69JYKvxP5Zo8\",\r\n      \"nP95P4eHuQF1W8cS6LkcsSffo2LLJy62CuqenP7DB3R\",\r\n      \"FXdxDUDg7LbLoYwynrgnjZMZb2kmi6YxY6zvg3Cq6hoD\",\r\n      \"AzMJi34EfK3HYhVNc1m53NLyacvkxA3H9DSTntNueM4f\",\r\n      \"BzCjhkTEo6fcAJxTSop1LCeZVhuHBhEN1BCf1oV8Juhk\",\r\n      \"4hKzK7GoN1eu9kRdhfrege3NaSmnkdkcjRKXot3vuMEH\",\r\n      \"Dcg6kzRTo4RVLJUzs3e98FYPij3xSgnXWocTvN71CjRk\",\r\n      \"5kLyYhoDFjVY6bwi6H4Dx6oeb2bVRG3pT9GpW4VtRP7q\",\r\n      \"2GiuaLqd9YV8r4XZYs5vRMgHrjhH5E3Wi7CG9ZVa7neq\",\r\n      \"DfREfesXW1xRusaywJntHBYNMpDL3KmdFCRPKuGJARGo\",\r\n      \"C8gdBroj8enRPPEjx4ZVXgHYj64UgeWxfZccGgq3MTvR\",\r\n      \"AbHahyFnXr6bvKgSTkb5G5NWaN6JAGMZTw1XZqtpWKUT\",\r\n      \"B9Mis5RwDkXA7CPSXD2oTeDgVZPQEB44EbLAkCVScVXL\",\r\n      \"DmQpiCUvE75tkGeVqFauc6v4xHcGhUEexnzaLBB64t9L\",\r\n      \"4Xcr9QnAjBfVu711UKm3uR2cD1cgSRQrHRcWMHR387os\",\r\n      \"EaSNpHpvUEZoH6RYqrqr2L49gx9jSb2kvS6mtyhYE5Zc\",\r\n      \"C8srQ3JM9Nv16fbtySC6PiBPwVFpaeErSYTx2rwCAtbL\",\r\n      \"EKBNzJdmEYssosxLcfJvvBPkY7k2v3wXNgPqsVEBmRgj\",\r\n      \"FPWNe1ynQGp7wpLqpUopmyx9yh4ALjZvMy3uyYk45VU8\",\r\n      \"ET3wk5daXJro6enHF6FV9aKGxz9deWGQfiVgfsEqsoeB\",\r\n      \"3MaDDzcQmE6kxDMsn7S82kLAmJHeJmMFBRjT3PMsbbKs\",\r\n      \"CFTF7zWEvMaPvsqGPEPpCdNtdS5abgPBu8n531kLnWfh\",\r\n      \"EEuPGLTsy761j2EpzG7gDaiFurJBnE4UTyTgWTov1Qzw\",\r\n      \"FyT4KrwEWzAmyyEFbJVGQkNanwp9ZMQkKYpb9ycnMqRb\",\r\n      \"3qphYWpqJ5GFsDkJcXFkqn4WgfL3ZiPPkjCK5gF7zkVJ\",\r\n      \"UGbQagtLqHS8C8d2nRcH5zNRH2DGTLXve8FzwtSTspK\",\r\n      \"8t8GFoY7aT8YiGqWLwdTNYMLnESySYgz1PtbfD8iergZ\",\r\n      \"CUequ6ded2cX98y12GVomJcooarvhJnFKMtNDucqc8EC\",\r\n      \"Cx1U1wdRM9V2o9t2gBaWoDfBP63Qg8eStgTzcFtiQxCR\",\r\n      \"moBFBDReNqS8THGoRcU3E37YjhdfmboB5Rvh7g6P3xp\",\r\n      \"CcbjrGnymttxibKKAidCT76GjkcNRHjWDFHbgK96TA8u\",\r\n      \"5E2tV64JXWM5WoyobxHzMiSwkZBjwjHFzYQDg9rBA5LW\",\r\n      \"7dMZkJYhKiTViuQ6btQG1r1yYQAVFryBuXKPwG3Ef2SP\",\r\n      \"6RGSFFC8AAYJRnq7QrUF78uxtvNQWRi3TbzCAivgeVp8\",\r\n      \"2aCNBsutNib33Rc2ZhVpT8xETAJyPM4S8JPsUpXjmuQF\",\r\n      \"8hrNMGHuqMvEmsjqpPT7noiGHZii8ELCE1GEKtwnhZHh\",\r\n      \"54ijCD4SUX6Rc5w3QusJkfkPmA2fvocUiuKqmoub1M5Z\",\r\n      \"FPoBpMDnNuNr48AuW9homx8u6EDrNDdcjtUyh5CxZ3UR\",\r\n      \"6rkPWg66Qsjrwhs5havPCUj5z59zxSJFMw5zbm35Xt6J\",\r\n      \"DCR3XdP4iAiLJ343hXcJTYk2kXuNoqnD2wi5zarKR3YG\",\r\n      \"8CiG2dGKE2r19w7NULnCPnb62AH8rPsPG4mK6cGVr6D2\",\r\n      \"8t5NXDd96Meup6hnLrSdjmvSsJ6XQRmA6CmqZacmucSa\",\r\n      \"66im1qaAuwGN7v8v992a3NHpg4p1eq1LvxqjTiJave48\",\r\n      \"Ekys42DWTPc3swSWVcWDwFiwUMscs54mn76VAXpVMyxh\",\r\n      \"9qqVSgqdtVhbszQKD7KA39zzesRGW1YNARNHCa5sSz5a\",\r\n      \"86ALtwdsCP2KgtUvm37jG9E3JPZpzb5PP55NfkA7GiUw\",\r\n      \"Ge1SVh4Ebe28bruMBdkcSBv8BqMW6REu9CBDb3mrqyoR\",\r\n      \"6H71EwbQX8gE54b8Q1xjr9doo6qY8f2xsziciTqzv8dU\",\r\n      \"8rua8RMSM2mMgUEJP52D2TFWcKbJ1t2XbNWB3njZ1hVj\",\r\n      \"7qiTJQDA57NwPBqUV6Nyv1EFoyd2wZyR98FWntMLafup\",\r\n      \"9Wz1ST8bE6oW8GB4BG1j4hDYZx3rGyTcjx1kd5CDhFzK\",\r\n      \"EFdQJVpF4AD3ZjKjUiTC8ThQXghk8gENT33r5Wn28pV5\",\r\n      \"3DRHhszVZMoco6wZuLkJs2aMotCb16SooTZJi5tjaV2K\",\r\n      \"Gp5V5GFoe3WSnuoweUfmhJWbpdT14Tm1PN81xCLvWFzR\",\r\n      \"4EmcijaB76L9FtVJNLzji72WUcGUPUKjLT6VDNcxnbPG\",\r\n      \"AM5BSvXLr8Bo8mgvsxB73Bw1v65wkyie1kwYgci18uUz\",\r\n      \"EJBoMxNTQ19NrjtBTwQegBFdLDPucB15Z1F1bY7XnFfu\",\r\n      \"Sypw9dqa2fqwxvXbq8d78mJs9yjcyCcHcuyVSDwxPrg\",\r\n      \"DiUBG7GEmJY7RJpTWQa6bp2n1hWkRb9Yu7oWABnCrL6A\",\r\n      \"4c9xKFiBRSZvEoh3PD1ypRa85oMbjzT4vp9wJyPYJTwV\",\r\n      \"8qHDPrQmworjXBm4tavic5k8GWNWdYZ1vYpJkgY3kjbL\",\r\n      \"E5pKAi3mvLmoXk9A8M4MTbueUtMUMXu1B4o22NhHgicP\",\r\n      \"H3Z83Y9xVbd6ZjXpySQXeFnHLEnH4WcVXZ8YyTH3i1dB\",\r\n      \"B4qXPVJEkBvufunFSVzCvdarAwMfJJmT2w7eLenqK29q\",\r\n      \"6GUKezunjgfbiGQfq1VZxbDratDfJnAELCAFnWrYqWsc\",\r\n      \"5XfCgyvaWyeGW8ux47nBzXb5YHkyuTPd6bkRLVFPrpfy\",\r\n      \"Gk984pgeWTakSdnnG9kLkmMbHpNmzV8hNmUUjqcckKXG\",\r\n      \"AGih4n8ENBx4HuKtWjApQHSHzxroytRZGMSRq18uQWm\",\r\n      \"CYz67JXMjosDktDf1AJ49CSfUVMtfaCzVm2k3V7jJpYH\",\r\n      \"BtPtzZ8JAjdjK7JUxXw6DoXZNw68LjA7df2XfMCFFedN\",\r\n      \"V3SXFw6fzwRkeu3MBAvNFoRz5GFHRKNqUARe1DJPVHR\",\r\n      \"HSsQ3WcC91ije6sk6DKCek2d4ZnNptWDq6T5rurb9Lro\",\r\n      \"6VaQhAVqCNMgbyzSu8TqmGmadtdDkfuYr12sCKFcvj72\",\r\n      \"BVJnq8uLYJsMYmhYA9N3TpPqFYTxJcaxJFxknzk5RtHo\"\r\n      ]\r\n    let ctdeposit = await props.connection.getParsedTokenAccountsByOwner(wallet.publicKey!,{ programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA') });\r\n    let auth = false;\r\n    for (let c in ctdeposit.value) {\r\n      if (ctdeposit.value[c].account.data.parsed.info.tokenAmount.amount == 1)\r\n      {\r\n        if (mints.includes(ctdeposit.value[c].account.data.parsed.info.mint))\r\n        {\r\n            auth = true;\r\n        }\r\n      }\r\n    }\r\n    if (auth == false) {\r\n      alert('You dont have a Cooking Tool NFT in this wallet!');\r\n      process.exit();\r\n    }\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    let mintAmount = 1;\r\n    if (urlParams.get('amount'))\r\n    {\r\n      mintAmount = parseInt(urlParams.get('amount')!);\r\n    }\r\n\r\n    for(let i = 0; i<mintAmount; i++)\r\n    {\r\n      try {\r\n        setIsUserMinting(true);\r\n        document.getElementById('#identity')?.click();\r\n        if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n  \r\n          const mintTxId = (\r\n            await mintOneToken(candyMachine, wallet.publicKey)\r\n          )[0];\r\n  \r\n          let status: any = { err: true };\r\n          if (mintTxId) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              mintTxId[i],\r\n              props.txTimeout,\r\n              props.connection,\r\n              true,\r\n            );\r\n          }\r\n  \r\n          if (status && !status.err) {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'TX Sent!',\r\n              severity: 'success',\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'TX Sent!',\r\n              severity: 'success',\r\n            });\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        let message = error.msg || 'Minting failed! Please try again!';\r\n        if (!error.msg) {\r\n          if (!error.message) {\r\n            message = 'Transaction Timeout! Please try again.';\r\n          } else if (error.message.indexOf('0x137')) {\r\n            message = `ERROR!`;\r\n          } else if (error.message.indexOf('0x135')) {\r\n            message = `Insufficient funds to mint. Please fund your wallet.`;\r\n          }\r\n        } else {\r\n          if (error.code === 311) {\r\n            message = `ERROR!`;\r\n            window.location.reload();\r\n          } else if (error.code === 312) {\r\n            message = `Minting period hasn't started yet.`;\r\n          }\r\n        }\r\n  \r\n        setAlertState({\r\n          open: true,\r\n          message,\r\n          severity: 'error',\r\n        });\r\n      } finally {\r\n        setIsUserMinting(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              <Header candyMachine={candyMachine} />\r\n              <MintContainer>\r\n                {wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    clusterUrl={rpcUrl}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      onMint={onMint}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    onMint={onMint}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { toDate, formatNumber } from './utils';\r\nimport { CandyMachineAccount } from './candy-machine';\r\n\r\ntype HeaderProps = {\r\n  candyMachine?: CandyMachineAccount;\r\n};\r\n\r\nexport const Header = ({ candyMachine }: HeaderProps) => {\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {candyMachine && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid item xs={6} direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Remaining\r\n              </Typography>\r\n              <Typography\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {`${candyMachine?.state.itemsRemaining}/`}\r\n                {`${candyMachine?.state.itemsAvailable}`}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  let candy = '7Ex9NSU9XQ16cWhzxNme7US7PqpTSSCNAsjt3DpAe2X9';\r\n  if (urlParams.get('address'))\r\n  {\r\n    candy = urlParams.get('address')!;\r\n  }\r\n\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      //process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n      candy,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = 'mainnet-beta' as WalletAdapterNetwork;\r\n//const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\n\r\n\r\nconst queryString = window.location.search;\r\nconst urlParams = new URLSearchParams(queryString);\r\nlet rpcUrl = 'https://trashpandas.rpcpool.com/';\r\nif (urlParams.get('api'))\r\n{\r\n  rpcUrl = urlParams.get('api')!;\r\n}\r\nconst rpcHost = rpcUrl;\r\n\r\n\r\nconst connection = new anchor.web3.Connection(rpcHost\r\n  ? rpcHost\r\n  : anchor.web3.clusterApiUrl('devnet'));\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              startDate={startDateSeed}\r\n              txTimeout={txTimeoutInMilliseconds}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { Transaction, SystemProgram, TransactionInstruction, PublicKey } from '@solana/web3.js';\r\nimport bs58 from 'bs58';\r\n\r\n\r\nimport {\r\n  getAtaForMint,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  config: anchor.web3.PublicKey;\r\n  orderInfo: anchor.web3.PublicKey;\r\n  notary: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  wallet: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemedNormal.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      config: state.config,\r\n      orderInfo: state.orderInfo,\r\n      notary: state.notary,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      wallet: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getWalletLimit = async (\r\n  payer: anchor.web3.PublicKey,\r\n  candyAddress: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('wallet_limit'),\r\n        candyAddress.toBuffer(),\r\n        payer.toBuffer(),\r\n      ],\r\n      CANDY_MACHINE_PROGRAM,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getStagesInfo = async (\r\n  candyAddress: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('candy_machine'), \r\n        Buffer.from('launch_stages'), \r\n        candyAddress.toBuffer()\r\n      ],\r\n      CANDY_MACHINE_PROGRAM,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getWalletBump = async (\r\n  payer: anchor.web3.PublicKey,\r\n  candyAddress: anchor.web3.PublicKey,\r\n): Promise<number> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('wallet_limit'),\r\n        candyAddress.toBuffer(),\r\n        payer.toBuffer(),\r\n      ],\r\n      CANDY_MACHINE_PROGRAM,\r\n    )\r\n  )[1];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const candyConfig = new PublicKey(candyMachine.state.config);\r\n  const orderInfo = new PublicKey(candyMachine.state.orderInfo);\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n\r\n  const compute = new TransactionInstruction({\r\n    keys: [\r\n    ],\r\n    programId: new PublicKey(\"ComputeBudget111111111111111111111111111111\"),\r\n    data: Buffer.from(\"00e0930400\", \"hex\")\r\n    ,\r\n  });\r\n  const memoTX = new TransactionInstruction({\r\n    keys: [],\r\n    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\r\n    data: Buffer.from(\"2EE2Hhoe8fVAYn7J5qwuayNmrEgmTPskLyszojv\"),\r\n  });\r\n  /*\r\n  const createAccountTX = anchor.web3.SystemProgram.createAccount({\r\n    fromPubkey: payer,\r\n    newAccountPubkey: mint.publicKey,\r\n    space: MintLayout.span,\r\n    lamports:\r\n      await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n        MintLayout.span,\r\n      ),\r\n    programId: TOKEN_PROGRAM_ID,\r\n  });\r\n  const createMintTX = Token.createInitMintInstruction(\r\n    TOKEN_PROGRAM_ID,\r\n    mint.publicKey,\r\n    0,\r\n    payer,\r\n    payer,\r\n  );\r\n  const createTokenTX = createAssociatedTokenAccountInstruction(\r\n    userTokenAccountAddress,\r\n    payer,\r\n    payer,\r\n    mint.publicKey,\r\n  );\r\n  const createMintToTX = Token.createMintToInstruction(\r\n    TOKEN_PROGRAM_ID,\r\n    mint.publicKey,\r\n    userTokenAccountAddress,\r\n    payer,\r\n    [],\r\n    1,\r\n  );*/\r\n\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n  const walletInfo = await getWalletLimit(payer, candyMachineAddress);\r\n  const walletBump = await getWalletBump(payer, candyMachineAddress);\r\n  const launchStagesInfo = await getStagesInfo(candyMachineAddress);\r\n\r\n  const accounts  = {\r\n    config: candyConfig,\r\n    candyMachine: candyMachineAddress,\r\n    mintReceiver: payer,\r\n    payer: payer,\r\n    launchStagesInfo: launchStagesInfo,\r\n    wallet: candyMachine.state.wallet,\r\n    metadata: metadataAddress,\r\n    mint: mint.publicKey,\r\n    tokenAta: userTokenAccountAddress,\r\n    masterEdition,\r\n    walletLimitInfo: walletInfo,\r\n    orderInfo: orderInfo,\r\n    slotHashes: new PublicKey('SysvarS1otHashes111111111111111111111111111'),\r\n    tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n    tokenProgram: TOKEN_PROGRAM_ID,\r\n    systemProgram: SystemProgram.programId,\r\n    associatedTokenProgram: new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'),\r\n    rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n  };\r\n\r\n  remainingAccounts.push({\r\n    pubkey: SystemProgram.programId,\r\n    isWritable: false,\r\n    isSigner: false,\r\n  });\r\n  remainingAccounts.push({\r\n    pubkey: payer,\r\n    isWritable: true,\r\n    isSigner: true,\r\n  });\r\n  remainingAccounts.push({\r\n    pubkey: candyMachine.state.notary,\r\n    isWritable: false,\r\n    isSigner: true,\r\n  });\r\n\r\n  const mintNftTX = await candyMachine.program.instruction.mintNft(walletBump, false, {\r\n    accounts: accounts, \r\n    remainingAccounts: remainingAccounts,\r\n  });\r\n\r\n  let transaction = new Transaction();\r\n  transaction.add(\r\n    compute,\r\n    memoTX,\r\n    mintNftTX,\r\n);\r\n  /*transaction.add(\r\n    createAccountTX,\r\n    memoTX,\r\n    createMintTX,\r\n    createTokenTX,\r\n    createMintToTX,\r\n    mintNftTX,\r\n  );*/\r\n  transaction.feePayer = payer;\r\n  transaction.recentBlockhash = (await candyMachine.program.provider.connection.getRecentBlockhash()).blockhash;\r\n \r\n  const txMessage = transaction.serializeMessage();\r\n\r\n  const body = {\r\n    response: \"\",\r\n    message: bs58.encode(txMessage),\r\n  };\r\n\r\n  const response = await fetch(\"https://wk-notary-prod.magiceden.io/sign\", {\r\n    method: 'POST',\r\n    body: JSON.stringify(body),\r\n    headers: {'Content-Type': 'application/json'}\r\n  });\r\n  const data = await response.json();\r\n  const signature = bs58.decode(data.signature);\r\n\r\n  transaction = await candyMachine.program.provider.wallet.signTransaction(transaction);\r\n  transaction.partialSign(mint);\r\n  \r\n  transaction.addSignature(new PublicKey(candyMachine.state.notary), signature);\r\n  const finalTx = transaction.serialize({ verifySignatures: false });\r\n\r\n  let options = {\r\n    skipPreflight: true\r\n  };\r\n\r\n  await candyMachine.program.provider.connection.sendRawTransaction(\r\n    finalTx,\r\n    options\r\n  );\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n"],"sourceRoot":""}