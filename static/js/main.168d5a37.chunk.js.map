{"version":3,"sources":["MintCountdown.tsx","Header.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","Header","candyMachine","Grid","container","direction","wrap","Typography","variant","state","itemsRemaining","getMintPrice","toDate","goLiveDate","isPresale","anchor","Date","getTime","undefined","isActive","isSoldOut","price","formatNumber","asNumber","whitelistMintSettings","discountPrice","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","onClick","a","gatekeeper","ConnectButton","WalletDialogButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","message","severity","alertState","setAlertState","queryString","window","location","search","urlParams","URLSearchParams","rpcUrl","get","wallet","useWallet","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","candyMachineId","getCandyMachineState","connection","cndy","console","log","mintAmount","parseInt","i","document","getElementById","click","connected","program","mintOneToken","mintTxId","err","awaitTransactionSignatureConfirmation","txTimeout","msg","code","reload","indexOf","Container","marginTop","maxWidth","position","backgroundColor","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","candy","e","getCandyMachineId","network","rpcHost","Connection","clusterApiUrl","startDateSeed","process","REACT_APP_CANDY_START_DATE","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","startDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","value","toNumber","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","getAtaForMint","mint","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","slot","confirmations","subId","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","provider","preflightCommitment","fetchIdl","idl","account","fetch","itemsAvailable","itemsRedeemed","presale","id","config","notary","endSettings","endSettingType","number","tokenMint","hiddenSettings","getMasterEdition","getMetadata","getWalletLimit","candyAddress","getWalletBump","Keypair","generate","userTokenAccountAddress","candyConfig","candyMachineAddress","remainingAccounts","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccountTX","createAccount","memoTX","createMintTX","Token","createInitMintInstruction","createTokenTX","createMintToTX","createMintToInstruction","metadataAddress","masterEdition","walletInfo","walletBump","accounts","metadata","mintAuthority","updateAuthority","walletLimitInfo","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","push","instruction","mintNft","mintNftTX","transaction","Transaction","add","feePayer","getRecentBlockhash","recentBlockhash","blockhash","txMessage","serializeMessage","body","response","bs58","encode","method","JSON","stringify","headers","json","signature","decode","partialSign","addSignature","finalTx","serialize","verifySignatures","skipPreflight","sendRawTransaction","ms"],"mappings":"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","file":"static/js/main.168d5a37.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n        marginRight: 0,\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: theme.spacing(1),\r\n      marginRight: 0,\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { toDate, formatNumber } from './utils';\r\nimport { CandyMachineAccount } from './candy-machine';\r\n\r\ntype HeaderProps = {\r\n  candyMachine?: CandyMachineAccount;\r\n};\r\n\r\nexport const Header = ({ candyMachine }: HeaderProps) => {\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {candyMachine && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Remaining\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {`${candyMachine?.state.itemsRemaining}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Price\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getMintPrice(candyMachine)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        <MintCountdown\r\n          date={toDate(\r\n            candyMachine?.state.goLiveDate\r\n              ? candyMachine?.state.goLiveDate\r\n              : candyMachine?.state.isPresale\r\n              ? new anchor.BN(new Date().getTime() / 1000)\r\n              : undefined,\r\n          )}\r\n          style={{ justifyContent: 'flex-end' }}\r\n          status={\r\n            !candyMachine?.state?.isActive || candyMachine?.state?.isSoldOut\r\n              ? 'COMPLETED'\r\n              : candyMachine?.state.isPresale\r\n              ? 'PRESALE'\r\n              : 'LIVE'\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getMintPrice = (candyMachine: CandyMachineAccount): string => {\r\n  const price = formatNumber.asNumber(\r\n    candyMachine.state.isPresale && candyMachine.state.whitelistMintSettings?.discountPrice\r\n      ? candyMachine.state.whitelistMintSettings?.discountPrice!\r\n      : candyMachine.state.price!,\r\n  );\r\n  return `◎ ${price}`;\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n  const getMintButtonContent = () => {\r\n    /*if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (candyMachine?.state.isPresale) {\r\n      return 'PRESALE MINT';\r\n    }*/\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      /*disabled={\r\n        candyMachine?.state.isSoldOut ||\r\n        isMinting ||\r\n        !candyMachine?.state.isActive\r\n      }*/\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n            setClicked(true);\r\n          } else {\r\n            await requestGatewayToken();\r\n          }\r\n        } else {\r\n          await onMint();\r\n          //setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport { Connection as conn } from '@solana/web3.js';\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport bs58 from 'bs58';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\nimport { AlertState } from './utils';\r\nimport { Header } from './Header';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { SolanaGatewayProvider } from '@civic/solana-gateway-react/dist/esm/solana';\r\nimport { profileEnd } from 'console';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n\r\n\r\n\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  let rpcUrl = 'https://trashpandas.rpcpool.com/';\r\n  if (urlParams.get('api'))\r\n  {\r\n    rpcUrl = urlParams.get('api')!;\r\n  }\r\n\r\n  const wallet = useWallet();\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log('There was a problem fetching Candy Machine state');\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  const onMint = async () => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    let mintAmount = 1;\r\n    if (urlParams.get('amount'))\r\n    {\r\n      mintAmount = parseInt(urlParams.get('amount')!);\r\n    }\r\n\r\n    for(let i = 0; i<mintAmount; i++)\r\n    {\r\n      try {\r\n        setIsUserMinting(true);\r\n        document.getElementById('#identity')?.click();\r\n        if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n  \r\n          const mintTxId = (\r\n            await mintOneToken(candyMachine, wallet.publicKey)\r\n          )[0];\r\n  \r\n          let status: any = { err: true };\r\n          if (mintTxId) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              mintTxId[i],\r\n              props.txTimeout,\r\n              props.connection,\r\n              true,\r\n            );\r\n          }\r\n  \r\n          if (status && !status.err) {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'Congratulations! Mint succeeded!',\r\n              severity: 'success',\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'Mint failed! Please try again!',\r\n              severity: 'error',\r\n            });\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        let message = error.msg || 'Minting failed! Please try again!';\r\n        if (!error.msg) {\r\n          if (!error.message) {\r\n            message = 'Transaction Timeout! Please try again.';\r\n          } else if (error.message.indexOf('0x137')) {\r\n            message = `SOLD OUT!`;\r\n          } else if (error.message.indexOf('0x135')) {\r\n            message = `Insufficient funds to mint. Please fund your wallet.`;\r\n          }\r\n        } else {\r\n          if (error.code === 311) {\r\n            message = `SOLD OUT!`;\r\n            window.location.reload();\r\n          } else if (error.code === 312) {\r\n            message = `Minting period hasn't started yet.`;\r\n          }\r\n        }\r\n  \r\n        setAlertState({\r\n          open: true,\r\n          message,\r\n          severity: 'error',\r\n        });\r\n      } finally {\r\n        setIsUserMinting(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              <Header candyMachine={candyMachine} />\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      onMint={onMint}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    onMint={onMint}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  let candy = '7Ex9NSU9XQ16cWhzxNme7US7PqpTSSCNAsjt3DpAe2X9';\r\n  if (urlParams.get('address'))\r\n  {\r\n    candy = urlParams.get('address')!;\r\n  }\r\n\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      //process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n      candy,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = 'mainnet-beta' as WalletAdapterNetwork;\r\n//const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\n\r\n\r\nconst queryString = window.location.search;\r\nconst urlParams = new URLSearchParams(queryString);\r\nlet rpcUrl = 'https://trashpandas.rpcpool.com/';\r\nif (urlParams.get('api'))\r\n{\r\n  rpcUrl = urlParams.get('api')!;\r\n}\r\nconst rpcHost = rpcUrl;\r\n\r\n\r\nconst connection = new anchor.web3.Connection(rpcHost\r\n  ? rpcHost\r\n  : anchor.web3.clusterApiUrl('devnet'));\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              startDate={startDateSeed}\r\n              txTimeout={txTimeoutInMilliseconds}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { Transaction, SystemProgram, TransactionInstruction, PublicKey } from '@solana/web3.js';\r\nimport bs58 from 'bs58';\r\n\r\n\r\nimport {\r\n  getAtaForMint,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'CMY8R8yghKfFnHKCWjzrArUpYH4PbJ56aWBr4kCP4DMk',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  config: anchor.web3.PublicKey;\r\n  notary: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  wallet: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | [number, anchor.BN];\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  const presale =\r\n    state.data.whitelistMintSettings &&\r\n    state.data.whitelistMintSettings.presale &&\r\n    (!state.data.goLiveDate ||\r\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      config: state.config,\r\n      notary: state.notary,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        (presale ||\r\n          state.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      isPresale: presale,\r\n      goLiveDate: state.data.goLiveDate,\r\n      wallet: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getWalletLimit = async (\r\n  payer: anchor.web3.PublicKey,\r\n  candyAddress: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('wallet_limit'),\r\n        candyAddress.toBuffer(),\r\n        payer.toBuffer(),\r\n      ],\r\n      CANDY_MACHINE_PROGRAM,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getWalletBump = async (\r\n  payer: anchor.web3.PublicKey,\r\n  candyAddress: anchor.web3.PublicKey,\r\n): Promise<number> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('wallet_limit'),\r\n        candyAddress.toBuffer(),\r\n        payer.toBuffer(),\r\n      ],\r\n      CANDY_MACHINE_PROGRAM,\r\n    )\r\n  )[1];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const candyConfig = new PublicKey(candyMachine.state.config);\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n\r\n  const createAccountTX = anchor.web3.SystemProgram.createAccount({\r\n    fromPubkey: payer,\r\n    newAccountPubkey: mint.publicKey,\r\n    space: MintLayout.span,\r\n    lamports:\r\n      await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n        MintLayout.span,\r\n      ),\r\n    programId: TOKEN_PROGRAM_ID,\r\n  });\r\n  const memoTX = new TransactionInstruction({\r\n    keys: [],\r\n    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\r\n    data: Buffer.from(\"2EE2Hhoe8fVAYn7J5qwuayNmrEgmTPskLyszojv\"),\r\n  });\r\n  const createMintTX = Token.createInitMintInstruction(\r\n    TOKEN_PROGRAM_ID,\r\n    mint.publicKey,\r\n    0,\r\n    payer,\r\n    payer,\r\n  );\r\n  const createTokenTX = createAssociatedTokenAccountInstruction(\r\n    userTokenAccountAddress,\r\n    payer,\r\n    payer,\r\n    mint.publicKey,\r\n  );\r\n  const createMintToTX = Token.createMintToInstruction(\r\n    TOKEN_PROGRAM_ID,\r\n    mint.publicKey,\r\n    userTokenAccountAddress,\r\n    payer,\r\n    [],\r\n    1,\r\n  );\r\n\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n  const walletInfo = await getWalletLimit(payer, candyMachineAddress);\r\n  const walletBump = await getWalletBump(payer, candyMachineAddress);\r\n\r\n  const accounts  = {\r\n    config: candyConfig,\r\n    candyMachine: candyMachineAddress,\r\n    payer: payer,\r\n    wallet: candyMachine.state.wallet,\r\n    metadata: metadataAddress,\r\n    mint: mint.publicKey,\r\n    mintAuthority: payer,\r\n    updateAuthority: payer,\r\n    masterEdition,\r\n    walletLimitInfo: walletInfo,\r\n    tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n    tokenProgram: TOKEN_PROGRAM_ID,\r\n    systemProgram: SystemProgram.programId,\r\n    rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n    clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n  };\r\n\r\n  remainingAccounts.push({\r\n    pubkey: SystemProgram.programId,\r\n    isWritable: true,\r\n    isSigner: false,\r\n  });\r\n  remainingAccounts.push({\r\n    pubkey: SystemProgram.programId,\r\n    isWritable: true,\r\n    isSigner: false,\r\n  });\r\n  remainingAccounts.push({\r\n    pubkey: candyMachine.state.notary,\r\n    isWritable: false,\r\n    isSigner: true,\r\n  });\r\n\r\n  const mintNftTX = await candyMachine.program.instruction.mintNft(walletBump, {\r\n    accounts: accounts, \r\n    remainingAccounts: remainingAccounts,\r\n  });\r\n\r\n  let transaction = new Transaction();\r\n  transaction.add(\r\n    createAccountTX,\r\n    memoTX,\r\n    createMintTX,\r\n    createTokenTX,\r\n    createMintToTX,\r\n    mintNftTX,\r\n  );\r\n  transaction.feePayer = payer;\r\n  transaction.recentBlockhash = (await candyMachine.program.provider.connection.getRecentBlockhash()).blockhash;\r\n \r\n  const txMessage = transaction.serializeMessage();\r\n\r\n  const body = {\r\n    response: \"2EE2Hhoe8fVAYn7J5qwuayNmrEgmTPskLyszojv\",\r\n    message: bs58.encode(txMessage),\r\n  };\r\n\r\n  const response = await fetch(\"https://wk-notary-prod.magiceden.io/sign\", {\r\n    method: 'POST',\r\n    body: JSON.stringify(body),\r\n    headers: {'Content-Type': 'application/json'}\r\n  });\r\n  const data = await response.json();\r\n  const signature = bs58.decode(data.signature);\r\n\r\n  transaction = await candyMachine.program.provider.wallet.signTransaction(transaction);\r\n  transaction.partialSign(mint);\r\n  \r\n  transaction.addSignature(new PublicKey(candyMachine.state.notary), signature);\r\n  const finalTx = transaction.serialize({ verifySignatures: false });\r\n\r\n  let options = {\r\n    skipPreflight: true\r\n  };\r\n\r\n  await candyMachine.program.provider.connection.sendRawTransaction(\r\n    finalTx,\r\n    options\r\n  );\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n"],"sourceRoot":""}